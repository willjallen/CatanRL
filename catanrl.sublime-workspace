{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"total",
				"totalVolumnSoFar"
			],
			[
				"getW",
				"getWeight"
			],
			[
				"st",
				"status"
			],
			[
				"action",
				"action_okay"
			],
			[
				"PLAY",
				"PLAY_DEV_CARD"
			],
			[
				"pla",
				"player_with_turn"
			],
			[
				"all",
				"allowed_actions"
			],
			[
				"PUR",
				"PURCHASE_AND_PLAY_BUILDING"
			],
			[
				"ava",
				"available_buildings"
			],
			[
				"PURC",
				"PURCHASE_DEV_CARD"
			],
			[
				"can",
				"can_trade_to_bank"
			],
			[
				"Y",
				"YearOfPlenty\t(game.py)"
			],
			[
				"Vic",
				"VictoryPoint\t(game.py)"
			],
			[
				"dev_card",
				"dev_card_response\tabc"
			],
			[
				"disp",
				"displayBoard\tabc"
			],
			[
				"which",
				"which_player_response\tabc"
			],
			[
				"loc",
				"loc_y_response\tabc"
			],
			[
				"resourc",
				"resource_response\tabc"
			],
			[
				"prompt",
				"promptActions\tabc"
			],
			[
				"displ",
				"displayFullGameInfo\tabc"
			],
			[
				"display",
				"displayBoard\tabc"
			],
			[
				"Game",
				"GameWrapper\tabc"
			],
			[
				"promp",
				"promptActions\tabc"
			],
			[
				"inner",
				"innerArrayLength\tabc"
			],
			[
				"inn",
				"innerArrayDirectionSwitch\tabc"
			],
			[
				"x",
				"xHex\tabc"
			],
			[
				"rollS",
				"rollSum\tabc"
			],
			[
				"GLFW",
				"GLFWwindow\tabc"
			],
			[
				"game",
				"gameWindow\tabc"
			],
			[
				"SCREEN",
				"SCREEN_HEIGHT\tabc"
			],
			[
				"screen",
				"screenHeight\tabc"
			],
			[
				"SCREE",
				"SCREEN_HEIGHT\tabc"
			],
			[
				"SCREEN_",
				"SCREEN_WIDTH\tabc"
			],
			[
				"Resour",
				"ResourceType\t(board.cpp)"
			],
			[
				"Resourc",
				"ResourceType.h\t(board.cpp)"
			],
			[
				"Resource",
				"ResourceType\tabc"
			],
			[
				"Resou",
				"ResourceType\t(board.cpp)"
			],
			[
				"TWO_TO",
				"TWO_TO_ONE_ORE\tabc"
			],
			[
				"TWO",
				"TWO_TO_ONE_bBRICK\tabc"
			],
			[
				"TWO_",
				"TWO_TO_ONE_WOOD\tabc"
			],
			[
				"rollSu",
				"rollSumThree\tabc"
			],
			[
				"resour",
				"resourceThree\tabc"
			],
			[
				"resource",
				"resourceThree\tabc"
			],
			[
				"Linked",
				"LinkedList\t(LinkedList.cpp)"
			],
			[
				"curr",
				"currNode\tabc"
			],
			[
				"cur",
				"currNode\tabc"
			],
			[
				"found",
				"foundPtr_next\tabc"
			],
			[
				"tail",
				"_tailPtr"
			],
			[
				"userNa",
				"userNameLower\tabc"
			],
			[
				"to",
				"tolower\t(Post.cpp)"
			],
			[
				"invalid",
				"invalid_argument\tabc"
			],
			[
				"inval",
				"invalid_argument\tabc"
			],
			[
				"getTag",
				"getTagName\t(Tag.cpp)"
			],
			[
				"sani",
				"sanitizedTag\tabc"
			],
			[
				"foundT",
				"foundTags\tabc"
			],
			[
				"line",
				"lineBuffer\tabc"
			],
			[
				"dep",
				"depth\tabc"
			],
			[
				"wave",
				"waveAmplitude\tabc"
			],
			[
				"moved",
				"movedLatLong\tabc"
			],
			[
				"getL",
				"getLongitude\tabc"
			],
			[
				"Qu",
				"QuakeDataSegment\tabc"
			],
			[
				"Quake",
				"QuakeDataSegment\tabc"
			],
			[
				"length",
				"lengthOfQuake\tabc"
			],
			[
				"data",
				"dataSegment\tabc"
			],
			[
				"long",
				"longitude\tabc"
			],
			[
				"lat",
				"latitude\tabc"
			],
			[
				"subA",
				"subArrayCol\tabc"
			],
			[
				"sub",
				"subArrayRow\tabc"
			],
			[
				"mon",
				"monsters\tabc"
			],
			[
				"boardS",
				"boardSearchRow\tabc"
			],
			[
				"STATUS_",
				"STATUS_TREASURE\t(logic.h)"
			],
			[
				"next",
				"nextRow\tabc"
			],
			[
				"nex",
				"nextCol\tabc"
			],
			[
				"TILE_",
				"TILE_OPEN\tabc"
			],
			[
				"STAT",
				"STATUS_STAY\tabc"
			],
			[
				"ne",
				"nextCol\tabc"
			],
			[
				"TILE_P",
				"TILE_PILLAR\tabc"
			],
			[
				"origin",
				"originalMaxRow\tabc"
			],
			[
				"delete",
				"deleteMap\tabc"
			],
			[
				"ori",
				"originalMaxRow\tabc"
			],
			[
				"newMons",
				"newMonsterCol\tabc"
			],
			[
				"newMonster",
				"newMonsterCol\tabc"
			],
			[
				"newMonst",
				"newMonsterRow\tabc"
			],
			[
				"digit",
				"digitFollowsDecimal\tabc"
			],
			[
				"digi",
				"digitFollowDecimal\tabc"
			],
			[
				"decimal",
				"decimalCount\tabc"
			],
			[
				"numb",
				"numberCount\tabc"
			],
			[
				"dec",
				"decimalCount\tabc"
			],
			[
				"last",
				"lastItrSmallest\tabc"
			],
			[
				"sma",
				"smallest\tabc"
			],
			[
				"get",
				"getline\tabc"
			],
			[
				"countr",
				"countryArray\tabc"
			],
			[
				"num",
				"numberArray\tabc"
			],
			[
				"prep_",
				"prep_unsigned_int_array\t(parallel_tracks.cpp)"
			],
			[
				"time",
				"timeArray\tabc"
			],
			[
				"prep",
				"prep_float_array\t(parallel_tracks.cpp)"
			],
			[
				"smallest",
				"smallestIndex\tabc"
			],
			[
				"small",
				"smallestIndex\tabc"
			],
			[
				"timeA",
				"timeArrayElement\tabc"
			],
			[
				"carr",
				"carryIn\tabc"
			],
			[
				"smaller",
				"smallerString\tabc"
			],
			[
				"partial",
				"partialProduct\tabc"
			],
			[
				"cum",
				"cumulativeSum\tabc"
			],
			[
				"part",
				"partialProduct\tabc"
			],
			[
				"carry",
				"carryIn\tabc"
			],
			[
				"larger",
				"largerString\tabc"
			],
			[
				"larg",
				"largerString\tabc"
			],
			[
				"multi",
				"multiply\t(string_calculator.h)"
			],
			[
				"new",
				"newString\tabc"
			],
			[
				"leading",
				"leadingZeroes\tabc"
			],
			[
				"max",
				"maxNumberLength\tabc"
			],
			[
				"diig",
				"digitSum\tabc"
			],
			[
				"decima",
				"decimal_to_digit\tabc"
			],
			[
				"result",
				"resultantString\tabc"
			],
			[
				"di",
				"digitSum\tabc"
			],
			[
				"reo",
				"resourceType\tabc"
			],
			[
				"count",
				"count_valid_mv_numbers\t(functions.h)"
			],
			[
				"fina",
				"final_exam_total\tabc"
			],
			[
				"exam",
				"exam_average\tabc"
			],
			[
				"exam_to",
				"final_exam_total"
			],
			[
				"engag",
				"engagement_total\tabc"
			],
			[
				"final",
				"final_letter_grade\tabc"
			],
			[
				"weighted",
				"weighted_total\tabc"
			],
			[
				"en",
				"engagement\tabc"
			],
			[
				"TERRAIN",
				"TERRAIN_MASK_WALL\tconst"
			],
			[
				"roo",
				"rooms\tproperty"
			],
			[
				"Feed",
				"FeedHeader\tabc"
			],
			[
				"USERT_",
				"USER_AUTH_TOKEN_FAILED\tabc"
			]
		]
	},
	"buffers":
	[
		{
			"file": "GameWrapper.py",
			"settings":
			{
				"buffer_size": 50031,
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"revert",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"contents": "from pycatan.building import Building\nfrom pycatan.statuses import Statuses\nfrom pycatan.card import ResCard, DevCard\n\nimport math\n\n# The player class for\nclass Player:\n\n    def __init__ (self, game, num):\n        # the game the player belongs to\n        self.game = game\n        # the player number for this player\n        self.num = num\n        # used to track which initial placements the player has made        \n        self.num_initial_settlements = 2\n        self.num_initial_roads = 2\n        self.has_placed_initial_settlement = False\n        self.has_completed_initial_placement = False\n        self.initial_settlement = None\n        # used to determine the longest road\n        self.starting_roads = []\n        # the number of victory points\n        self.victory_points = 0\n        # the cards the player has\n        # each will be a number corresponding with the static variables CARD_<type>\n        self.cards = []\n        # the development cards this player has\n        self.dev_cards = []\n        # the number of knight cards the player has played\n        self.knight_cards = 0\n        # the longest road segment this player has\n        self.longest_road_length = 0\n        # whether the player has ended their turn\n        self.turn_over = True\n        # whether the player has a pending trade\n        self.pending_trade = False\n        # how many trades this player has requested in a turn\n        self.num_trades_in_turn = 0\n        # trading player\n        self.trading_player = None\n        # which card the trading player wants in trade\n        self.trade_forfeit_card = None\n        # which card the player will receive in trade\n        self.trade_receive_card = None\n        # number of cards the player must discard (from a 7 roll)\n        self.forfeited_cards_left = 0\n        # whether the player has played a road building dev card\n        self.played_road_building = False\n        # how many roads the player has left to place\n        self.roads_remaining = 0\n        # store the last bought dev card and the turn it was bought on \n        self.last_bought_dev_card = 0\n        self.last_bought_dev_card_turn = 0\n    # builds a settlement belonging to this player\n    def build_settlement(self, point, is_starting=False):\n\n        if not is_starting:\n            # makes sure the player has the cards to build a settlements\n            cards_needed = [\n                ResCard.Wood,\n                ResCard.Brick,\n                ResCard.Sheep,\n                ResCard.Wheat\n            ]\n\n            # checks the player has the cards\n            if not self.has_cards(cards_needed):\n                return Statuses.ERR_CARDS\n\n            # checks it is connected to a road owned by the player\n            connected_by_road = False\n            # gets the roads\n            roads = self.game.board.roads\n\n            for r in roads:\n                # checks if the road is connected\n                if r.point_one is point or r.point_two is point:\n                    # checks this player owns the road\n                    if r.owner == self.num:\n                        connected_by_road = True\n\n            if not connected_by_road:\n                return Statuses.ERR_ISOLATED\n\n        # checks that a building does not already exist there\n        if point.building != None:\n            return Statuses.ERR_BLOCKED\n\n        # checks all other settlements are at least 2 away\n        # gets the connecting point's coords\n        points = point.connected_points\n        for p in points:\n\n            # checks if the point is occupied\n            if p.building != None:\n                return Statuses.ERR_BLOCKED\n\n        if not is_starting:\n            # removes the cards\n            self.remove_cards(cards_needed)\n\n        # adds the settlement\n        self.game.board.add_building(Building(\n            owner = self.num,\n            type = Building.BUILDING_SETTLEMENT,\n            point_one = point),\n            point = point)\n        # adds a victory point\n        self.victory_points += 1\n\n        return Statuses.ALL_GOOD\n\n    def can_build_dev(self):\n        # makes sure there is still at least one development card left\n        if len(self.game.dev_deck) < 1:\n            return Statuses.ERR_DECK\n        # makes sure the player has the right cards\n        needed_cards = [\n            ResCard.Wheat,\n            ResCard.Ore,\n            ResCard.Sheep\n        ]\n        if not self.has_cards(needed_cards):\n            return Statuses.ERR_CARDS\n        return Statuses.ALL_GOOD\n        # checks if the player has all of the cards given in an array\n    def has_cards(self, cards):\n\n        # needs to duplicate the cards, and then delete them once found\n        # otherwise checking if the player has multiple of the same card\n        # will return true with only one card\n\n        # cards_dup stands for cards duplicate\n        cards_dup = self.cards[:]\n        for c in cards:\n            if cards_dup.count(c) == 0:\n                return False\n            else:\n                index = cards_dup.index(c)\n                del cards_dup[index]\n\n        return True\n\n    def get_types_of_cards_possessed(self):\n        card_types = []\n        for c in self.cards:\n            if not(c in card_types):\n                card_types.append(c)\n        return card_types\n\n    def get_available_buildings(self):\n        available_buildings = []\n\n        road_cards = [\n            ResCard.Wood,\n            ResCard.Brick\n        ]\n\n        settlement_cards = [\n            ResCard.Wood,\n            ResCard.Brick,\n            ResCard.Sheep,\n            ResCard.Wheat\n        ]\n\n        city_cards = [\n            ResCard.Wheat,\n            ResCard.Wheat,\n            ResCard.Ore,\n            ResCard.Ore,\n            ResCard.Ore\n        ]\n\n        if(self.has_cards(settlement_cards)):\n            available_buildings.append(Building.BUILDING_SETTLEMENT)\n\n        if(self.has_cards(road_cards)):\n            available_buildings.append(Building.BUILDING_ROAD)\n\n        if(self.has_cards(city_cards)):\n            available_buildings.append(Building.BUILDING_CITY)\n\n        return available_buildings\n\n    def get_available_robber_placement_tiles_and_victims(self):\n\n        robber_actions = []\n\n        curr_robber = self.game.board.robber\n        # checks the victim has a settlement on the tile\n        for r in self.game.board.tiles:\n            for tile in r:\n                # Check this is a different tile than the current robber tile\n                if(curr_robber):\n                    if(curr_robber.position[0] == tile.position[0] and curr_robber.position[1] == tile.position[1]):\n                        # If not, skip this tile\n                        continue\n\n                # Iterate over points and check if there is a settlement/city on any of them\n                points = tile.points\n                for p in points:\n                    if p != None and p.building != None:\n                        # Check the victim owns the settlement/city and has > 0 cards\n                        for player in self.game.players:\n                            if(p.building.owner == player.num) and (player.num != self.num) and (len(player.cards) > 0):\n                                robber_actions.append((tile, player))\n        return robber_actions\n\n    def get_available_road_point_pairs(self):\n\n        road_point_pairs = []\n\n\n\n        for r in self.game.board.points:\n            for point in r:\n                if(point.building):\n                    if(point.building.owner == self.num):\n                        for local_point in point.connected_points:\n                            location_status = self.road_location_is_valid(start=point, end=local_point)\n                            if(location_status == Statuses.ALL_GOOD):\n                                road_point_pairs.append((point, local_point))\n                        \n\n        for road in self.game.board.roads:\n            if(road.owner == self.num):\n               positions = [road.point_one, road.point_two]\n               for point in positions:\n                    for local_point in point.connected_points:\n                        location_status = self.road_location_is_valid(start=point, end=local_point)\n                        if(location_status == Statuses.ALL_GOOD):\n                            road_point_pairs.append((point, local_point)) \n\n\n        unique_road_point_pairs = []\n        [unique_road_point_pairs.append(pair) for pair in road_point_pairs if pair not in unique_road_point_pairs]\n        return unique_road_point_pairs\n\n\n    def get_available_initial_settlement_points(self):\n        available_points = []\n\n        for r in self.game.board.points:\n            for point in r:\n\n                # Check if there is already a building here\n                if(point.building == None):\n                    # Get all adjacent points and check for buildings there\n                    adj_points_clear = True\n                    points = point.connected_points\n                    for p in points:\n                        if(p.building != None):\n                            if(p.building.type == Building.BUILDING_SETTLEMENT or p.building.type == Building.BUILDING_CITY):\n                                adj_points_clear = False\n\n                    if(adj_points_clear):\n                        available_points.append(point) \n\n        return available_points\n\n\n    def get_available_initial_road_point_pairs(self):\n        available_points = []\n\n        connected_points = self.initial_settlement.connected_points\n        \n        adj_point_clear = True\n        for p in connected_points:\n            if(p.building != None):\n                if(point.building.type == Building.BUILDING_SETTLEMENT or point.building.type == Building.BUILDING_CITY):\n                    adj_points_clear = False\n            if(adj_point_clear):\n                available_points.append((self.initial_settlement, p))\n\n        return available_points\n\n    def get_available_settlement_points(self):\n\n        available_points = []\n\n        for r in self.game.board.points:\n            for point in r:\n                # checks it is connected to a road owned by the player\n                connected_by_road = False\n                # gets the roads\n                roads = self.game.board.roads\n\n                # checks that a settlement or city does not already exist there\n                if(point.building != None):\n                    if(point.building.type == Building.BUILDING_SETTLEMENT or point.building.type == Building.BUILDING_CITY):\n                        continue\n\n                for r in roads:\n                    # checks if the road is connected\n                    if r.point_one is point or r.point_two is point:\n                        # checks this player owns the road\n                        if r.owner == self.num:\n                            connected_by_road = True\n\n                if not connected_by_road:\n                    continue\n\n\n                # checks all other settlements are at least 2 away\n                # gets the connecting point's coords\n                distance_violation = False\n\n                points = point.connected_points\n\n                for p in points:\n                    # checks if the point is occupied\n                    if(p.building != None):\n                        if(p.building.type == Building.BUILDING_SETTLEMENT or p.building.type == Building.BUILDING_CITY):\n                            distance_violation = True\n                            break\n\n                if(distance_violation):\n                    continue\n\n                available_points.append(point)\n\n        return available_points\n\n    def get_available_city_points(self):\n        pass\n\n    def has_at_least_num_cards(self, card_type, num):\n        return self.cards.count(card_type) >= num\n\n\n\n    # adds some cards to a player's hand\n    def add_cards(self, cards):\n        for c in cards:\n            self.cards.append(c)\n\n    # removes cards from a player's hand\n    def remove_cards(self, cards):\n        # makes sure it has all the cards before deleting any\n        if not self.has_cards(cards):\n            return Statuses.ERR_CARDS\n\n        else:\n            # removes the cards\n            for c in cards:\n                index = self.cards.index(c)\n                del self.cards[index]\n\n    #adds a development card\n    def add_dev_card(self, dev_card):\n        self.dev_cards.append(dev_card)\n\n    # removes a dev card\n    def remove_dev_card(self, card):\n        # finds the card\n        for i in range(len(self.dev_cards)):\n            if self.dev_cards[i] == card:\n\n                # deletes the card\n                del self.dev_cards[i]\n                return Statuses.ALL_GOOD\n\n        # error if the player does not have the cards\n        return Statuses.ERR_CARDS\n\n\n\n\n    # checks a road location is valid\n    def road_location_is_valid(self, start, end):\n        has_city_owned_point = False\n        # checks if this player owns the settlement/city\n        # At most one point can be owned by a different player\n        if start.building != None:\n            if start.building.owner == self.num:\n                has_city_owned_point = True\n\n        # does the same for the other point\n        if end.building != None:\n            if end.building.owner == self.num:\n                has_city_owned_point = True\n\n        # # checks the two points are connected\n        # connected = False\n        # # gets the points connected to start\n        # points = start.connected_points\n\n        # for p in points:\n        #     if end == p:\n        #         connected = True\n        #         break\n\n        # if not connected:\n        #     return Statuses.ERR_NOT_CON\n\n        # checks the road does not already exists with these points\n        for road in self.game.board.roads:\n            if (road.point_one == start or road.point_two == start):\n                if road.point_one == end or road.point_two == end:\n                    return Statuses.ERR_BLOCKED\n\n\n        # then checks if there is a road connecting them\n        has_road_owned_point = False\n\n        roads = self.game.board.roads\n        # points = [start, end]\n\n        for r in roads:\n            if(r.owner == self.num):\n                if (r.point_one == start or r.point_one == end) or (r.point_two == start or r.point_two == end):\n                    has_road_owned_point = True\n                # checks that there is not another player's settlement here, so that it's not going through it\n                # if(p.building == None):\n                #     is_connected = True\n\n        if(has_road_owned_point or has_city_owned_point):\n            return Statuses.ALL_GOOD\n        else:\n            return Statuses.ERR_BLOCKED\n\n    def get_available_upgrade_points(self):\n        points = []\n\n        for r in self.game.board.points:\n            for point in r:\n                # Get building at point\n                building = point.building\n\n                # checks there is a settlement at r, i\n                if building == None:\n                    continue\n\n                # checks the settlement is controlled by the correct player\n                # if no player is specified, uses the current controlling player\n                if building.owner != self.num:\n                    continue\n\n                # checks it is a settlement and not a city\n                if building.type != Building.BUILDING_SETTLEMENT:\n                    continue\n                points.append(point)\n\n        return points\n\n    # builds a road\n    def build_road(self, start, end, is_starting=False):\n\n        # checks the location is valid\n        location_status = self.road_location_is_valid(start=start, end=end)\n\n        if not location_status == Statuses.ALL_GOOD:\n            return location_status\n\n        # if the road is being created on the starting turn, the player does not needed\n        # to have the cards\n        if not is_starting:\n\n            # checks that it has the proper cards\n            cards_needed = [\n                ResCard.Wood,\n                ResCard.Brick\n            ]\n            if not self.has_cards(cards_needed):\n                return Statuses.ERR_CARDS\n\n            # removes the cards\n            self.remove_cards(cards_needed)\n\n        # adds the road\n        road = Building(owner=self.num, type=Building.BUILDING_ROAD, point_one=start, point_two=end)\n        (self.game).board.add_road(road)\n\n        self.get_longest_road(new_road=road)\n\n        return Statuses.ALL_GOOD\n\n    # returns an array of all the harbors the player has access to\n    def get_connected_harbor_types(self):\n\n        # gets the settlements/cities belonging to this player\n        harbors = []\n        all_harbors = self.game.board.harbors\n        buildings = self.game.board.get_buildings()\n\n        for b in buildings:\n            # checks the building belongs to this player\n            if b.owner == self.num:\n                # checks if the building is connected to any harbors\n                for h in all_harbors:\n                    # print(h)\n                    # print(b.point)\n                    if h.point_one is b.point or h.point_two is b.point:\n                        # print(\"A\")\n                        # adds the type\n                        if harbors.count(h.type) == 0:\n                            harbors.append(h.type)\n\n        return harbors\n\n    # gets the longest road segment this player has which includes the road given\n    # should be called whenever a new road is build\n    # since this player's longest road will only change if a new road is build\n    def get_longest_road(self, new_road):\n\n        # gets the roads that belong to this player\n        roads = self.get_roads()\n        del roads[roads.index(new_road)]\n\n        # checks for longest road\n        # print('===Debug===')\n        self.check_connected_roads(road=new_road, all_roads=roads, length=1)\n\n    # checks the roads for connected roads, and then checks those roads until there are no more\n    def check_connected_roads(self, road, all_roads, length):\n        # print('---------------')\n        # print(road)\n        # print(all_roads)\n        # print(length)\n        # print()\n        # print()\n\n        # do both point one and two\n        points = [\n            road.point_one,\n            road.point_two\n        ]\n\n        for p in points:\n            # gets the connected roads\n            connected = self.get_connected_roads(point=p, roads=all_roads)\n            # print(connected)\n            # print('---------------')\n            # if there are no new connected roads\n            if len(connected) == 0:\n                # if this is the longest road so far\n                if (length-1) > self.longest_road_length:\n                    # records the length\n                    self.longest_road_length = (length-1)\n                    # self.begin_celebration()\n\n            # if there are connected roads\n            else:\n                # check each of them for connections if they have not been used\n                for c in connected:\n                    # checks it hasn't used this road before\n                    if all_roads.count(c) > 0:\n                        # copies all usable roads\n                        c_roads = all_roads[:]\n                        # removes this road from them\n                        del c_roads[c_roads.index(c)]\n                        # checks for connected roads to this road\n                        self.check_connected_roads(c, c_roads, length + 1)\n\n\n\n\n\n    # returns which roads in the roads array are connected to the point\n    def get_connected_roads(self, point, roads):\n        con_roads = []\n        for r in roads:\n            if r.point_one == point or r.point_two == point:\n                con_roads.append(r)\n\n        return con_roads\n\n    # returns an array of all the roads belonging to this player\n    def get_roads(self):\n        # gets all the roads on the board\n        all_roads = (self.game).board.roads\n        # filters out roads that do not belong to this player\n        roads = []\n        for r in all_roads:\n            if r.owner == self.num:\n                roads.append(r)\n\n        return roads\n\n    # checks if the player has some development cards\n    def has_dev_cards(self, cards):\n        card_duplicate = self.dev_cards[:]\n        for c in cards:\n            if not card_duplicate.count(c) > 0:\n                return False\n            else:\n                del card_duplicate[card_duplicate.index(c)]\n\n        return True\n\n    # returns the number of VP\n    # if include_dev is False, it will not include points from developement cards\n    # because other players aren't able to see them\n    def get_VP(self, include_dev=False):\n\n        # gets the victory points from settlements and cities\n        points = self.victory_points\n\n        # adds VPs from longest road\n        if self.game.longest_road_owner == self.num:\n            points += 2\n\n        # adds VPs from largest army\n        if self.game.largest_army == self.num:\n            points += 2\n\n        # adds VPs from developement cards\n        if include_dev:\n            for d in self.dev_cards:\n                if d == DevCard.VictoryPoint:\n                    points += 1\n\n        return points\n\n    # prints the cards given\n    @staticmethod\n    def print_cards(cards):\n        print(\"[\")\n        for c in cards:\n\n            card_name = \"\"\n\n            if c == ResCard.Wood:\n                card_name = \"Wood\"\n\n            elif c == ResCard.Sheep:\n                card_name = \"Sheep\"\n\n            elif c == ResCard.Brick:\n                card_name = \"Brick\"\n\n            elif c == ResCard.Wheat:\n                card_name = \"Wheat\"\n\n            elif c == ResCard.Ore:\n                card_name = \"Ore\"\n\n            elif c == DevCard.Road:\n                card_name = \"Road\"\n\n            elif c == DevCard.VictoryPoint:\n                card_name = \"VP\"\n\n            elif c == DevCard.Knight:\n                card_name = \"Knight\"\n\n            elif c == DevCard.Monopoly:\n                card_name = \"Monopoly\"\n\n            elif c == DevCard.YearOfPlenty:\n                card_name = \"YOP\"\n\n            else:\n                print(\"INVALID CARD %s\" % c)\n                continue\n\n            if cards.index(c) < len(cards) - 1:\n                card_name += \",\"\n\n            print(\"    %s\" % card_name)\n\n        print(\"]\")\n",
			"file": "pycatan/player.py",
			"file_size": 23076,
			"file_write_time": 132747609126627156,
			"settings":
			{
				"buffer_size": 22421,
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					137,
					1,
					"insert",
					{
						"characters": "\n\n\n"
					},
					"AwAAAGBMAAAAAAAAYUwAAAAAAAAAAAAAYUwAAAAAAABiTAAAAAAAAAAAAABiTAAAAAAAAGNMAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABgTAAAAAAAAGBMAAAAAAAAAAAAAAAA8L8"
				],
				[
					139,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAGFMAAAAAAAAYkwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABhTAAAAAAAAGFMAAAAAAAAAAAAAAAAAAA"
				]
			]
		},
		{
			"file": "random_agent.py",
			"settings":
			{
				"buffer_size": 4667,
				"line_ending": "Windows"
			}
		},
		{
			"file": "todo.txt",
			"settings":
			{
				"buffer_size": 933,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					15,
					1,
					"",
					null,
					"AgAAAKUDAAAAAAAA6wMAAAAAAAAAAAAAYQAAAAAAAABhAAAAAAAAAEYAAAAtKiogRGV2IGNhcmQgY2FuIG9ubHkgYmUgcGxheWVkIGF0IGxlYXN0IGEgdHVybiBhZnRlciBpdCB3YXMgcHVyY2hhc2Vk",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACnAAAAAAAAAGEAAAAAAAAAAAAAAAAA8L8"
				],
				[
					18,
					2,
					"left_delete",
					null,
					"AgAAAGEDAAAAAAAAYQMAAAAAAAABAAAAKmADAAAAAAAAYAMAAAAAAAABAAAAKg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABiAwAAAAAAAGIDAAAAAAAAAAAAAAAA8L8"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAF8DAAAAAAAAYAMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABfAwAAAAAAAF8DAAAAAAAAAAAAAAAA8L8"
				],
				[
					36,
					1,
					"left_delete",
					null,
					"AQAAAGAAAAAAAAAAYAAAAAAAAAABAAAACg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABhAAAAAAAAAGEAAAAAAAAAAAAAAACgZEA"
				],
				[
					45,
					1,
					"insert",
					{
						"characters": "**"
					},
					"AgAAACcAAAAAAAAAKAAAAAAAAAAAAAAAKAAAAAAAAAApAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAnAAAAAAAAACcAAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "catanrl.sublime-project",
			"settings":
			{
				"buffer_size": 78,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					2,
					1,
					"revert",
					null,
					"AwAAAAAAAAAAAAAAAAAAAAAAAAAtAAAAewoJImZvbGRlcnMiOgoJWwoJCXsKCQkJInBhdGgiOiAiLiIKCQl9CgldCn0KAAAAAAAAAABOAAAAAAAAAAAAAAAAAAAAAAAAAE4AAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				]
			]
		}
	],
	"build_system": "",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 784.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"settings",
				"Preferences: Settings"
			],
			[
				"markdown",
				"Set Syntax: Markdown"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"install pa",
				"Package Control: Install Package"
			],
			[
				"rename",
				"Rename File"
			],
			[
				"json",
				"Pretty JSON: Format JSON Lines"
			],
			[
				"ternjs",
				"TernJS: Reload"
			],
			[
				"ay",
				"ayu: Activate theme"
			],
			[
				"browse",
				"Preferences: Browse Packages"
			],
			[
				"error",
				"TypeScript: Show Error List"
			],
			[
				"build sy",
				"Build: New Build System"
			],
			[
				"packagae control remo",
				"Package Control: Remove Package"
			],
			[
				"build",
				"Build With: typescript_node"
			],
			[
				"Package Control: upda",
				"Package Control: Upgrade Package"
			],
			[
				"Package Control: inst",
				"Package Control: Install Package"
			],
			[
				"Package Control: ",
				"Package Control: Install Package"
			],
			[
				"virtual",
				"Virtualenv: Add directory"
			],
			[
				"package ",
				"Package Control: List Packages"
			],
			[
				"virut",
				"Virtualenv: Activate"
			],
			[
				"Package Control: ins",
				"Package Control: Install Package"
			],
			[
				"Package Control: add",
				"Package Control: Add Repository"
			],
			[
				" install pack",
				"Package Control: Install Package"
			],
			[
				"packag",
				"Install Package Control"
			],
			[
				"syntax javaS",
				"Set Syntax: JavaScript"
			],
			[
				"syntax HTML",
				"Set Syntax: HTML"
			]
		],
		"width": 856.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": true,
		"show_open_files": false,
		"show_tabs": true,
		"side_bar_visible": true,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/Users/WilliamAllen/Desktop/APP/CatanRL",
		"/C/Users/WilliamAllen/Desktop/APP/CatanRL/pycatan"
	],
	"file_history":
	[
		"/C/Users/WilliamAllen/Downloads/bad3.cpp",
		"/C/Users/WilliamAllen/Desktop/APP/CatanRL/agent.py",
		"/C/Users/WilliamAllen/Desktop/APP/CatanRL/random_agent.py",
		"/C/Users/WilliamAllen/Desktop/School/Fall2021School/221/include/Package.h",
		"/C/Users/WilliamAllen/Desktop/School/Fall2021School/221/include/Liquid.h",
		"/C/Users/WilliamAllen/Desktop/School/Fall2021School/221/include/AmazonTruck.h",
		"/C/Users/WilliamAllen/Desktop/School/Fall2021School/221/include/Address.h",
		"/C/Users/WilliamAllen/Desktop/School/Fall2021School/221/CMakeLists.txt",
		"/C/Users/WilliamAllen/Desktop/School/Fall2021School/221/src/input.txt",
		"/C/Users/WilliamAllen/Desktop/School/Fall2021School/221/src/test.cpp",
		"/C/Users/WilliamAllen/Desktop/School/Fall2021School/221/src/Driver.cpp",
		"/C/Users/WilliamAllen/Desktop/School/Fall2021School/221/src/AmazonTruck.cpp",
		"/C/Users/WilliamAllen/Desktop/School/Fall2021School/221/include/Dimension.h",
		"/C/Users/WilliamAllen/Desktop/School/old/Spring2021School/csce121/lw_linked/compilefull.sh",
		"/C/Users/WilliamAllen/Desktop/School/Fall2021School/221/Dimension.h",
		"/C/Users/WilliamAllen/Desktop/School/Fall2021School/221/Liquid.h",
		"/C/Users/WilliamAllen/Desktop/School/Fall2021School/221/Package.h",
		"/C/Users/WilliamAllen/Desktop/School/Fall2021School/221/AmazonTruck.h",
		"/C/Users/WilliamAllen/Desktop/School/Fall2021School/221/Address.h",
		"/C/Users/WilliamAllen/Desktop/School/Fall2021School/221/src/Address.cpp",
		"/C/Users/WilliamAllen/Desktop/School/Fall2021School/221/Address.cpp",
		"/C/Users/WilliamAllen/Desktop/School/Fall2021School/221/AmazonTruck.cpp",
		"/C/Users/WilliamAllen/Desktop/School/Fall2021School/221/Driver.cpp",
		"/C/Users/WilliamAllen/Desktop/APP/Catan/CMakeLists.txt",
		"/C/Users/WilliamAllen/Desktop/APP/Catan/src/gui/renderer/board_renderer.cpp",
		"/C/Users/WilliamAllen/Desktop/APP/Catan/src/board/actionpoint.h",
		"/C/Users/WilliamAllen/Desktop/APP/Catan/src/gui/renderer/board_renderer.h",
		"/C/Users/WilliamAllen/Desktop/APP/Catan/src/board/board.h",
		"/C/Users/WilliamAllen/Desktop/APP/Catan/src/game/game.h",
		"/C/Users/WilliamAllen/Desktop/APP/Catan/src/board/board.cpp",
		"/C/Users/WilliamAllen/Desktop/APP/Catan/shaders/sprite.vs",
		"/C/Users/WilliamAllen/Desktop/APP/Catan/src/game/game.cpp",
		"/C/Users/WilliamAllen/Desktop/APP/Catan/src/board/actionpoint.cpp",
		"/C/Users/WilliamAllen/Desktop/APP/Catan/src/board/tile.cpp",
		"/C/Users/WilliamAllen/Desktop/APP/Catan/src/board/tile.h",
		"/C/Users/WilliamAllen/Desktop/APP/Catan/src/constants/PortType.h",
		"/C/Users/WilliamAllen/Desktop/APP/Catan/src/constants/ResourceType.h",
		"/C/Users/WilliamAllen/Desktop/APP/Catan/src/constants/BuildingType.h",
		"/C/Users/WilliamAllen/Desktop/APP/Catan/src/utils/print_utils.cpp",
		"/C/Users/WilliamAllen/Desktop/APP/Catan/src/gui/renderer/resource_manager.cpp",
		"/C/Users/WilliamAllen/Desktop/Spring2021School/csce121/hw_mars_rover/Rover.h",
		"/C/Users/WilliamAllen/Desktop/Spring2021School/csce121/hw_cppers/compilefull.sh",
		"/C/Users/WilliamAllen/Desktop/Spring2021School/csce121/hw_cppers/compile.sh",
		"/C/Users/WilliamAllen/Desktop/Spring2021School/csce121/hw_dungeon_crawler/helper.h",
		"/C/Users/WilliamAllen/Desktop/Spring2021School/csce121/hw_dungeon_crawler/helper.cpp",
		"/C/Users/WilliamAllen/Desktop/Spring2021School/csce121/hw_dungeon_crawler/logic.h",
		"/C/Users/WilliamAllen/Desktop/Spring2021School/csce121/hw_dungeon_crawler/dungeoncrawler.cpp",
		"/C/Users/WilliamAllen/Desktop/Spring2021School/csce121/hw_dungeon_crawler/compile.sh",
		"/C/Users/WilliamAllen/Downloads/lab7-1.py",
		"/C/Users/WilliamAllen/Desktop/Spring2021School/csce121/hw_dungeon_crawler/logic.cpp",
		"/C/Users/WilliamAllen/Desktop/APP/personal_website/public/index.html",
		"/C/Users/WilliamAllen/Desktop/APP/personal_website/package.json",
		"/C/Users/WilliamAllen/Desktop/APP/Catan/libs/nanogui/ext/glad/include/glad/glad.h",
		"/C/Users/WilliamAllen/Desktop/APP/Catan/libs/nanogui/ext/glad/src/glad.c",
		"/C/Users/WilliamAllen/Desktop/APP/Catan/src/glad.c",
		"/C/Users/WilliamAllen/Downloads/glad/src/glad.c",
		"/C/Users/WILLIA~1/AppData/Local/Temp/7zE40972303/glad.c",
		"/C/Users/WilliamAllen/Desktop/APP/Catan/src/board.cpp",
		"/C/Users/WilliamAllen/Desktop/Spring2021School/csce121/lw_2/nth_root.h",
		"/C/Users/WilliamAllen/Desktop/Spring2021School/csce121/lw_2/test_helpers.h",
		"/C/Users/WilliamAllen/Desktop/Spring2021School/csce121/lw_2/nth_root.cpp",
		"/C/Users/WilliamAllen/Desktop/School Spring 2021/csce 121/hw_1/grade_calculator.cpp",
		"/C/Users/WilliamAllen/Downloads/schedule.ics",
		"/C/Users/WilliamAllen/Desktop/School Spring 2021/csce 121/grade_calculator.cpp",
		"/C/Users/WilliamAllen/Desktop/APP/catalog_gen/app.js",
		"/C/Users/WilliamAllen/Desktop/APP/catalog_gen/Page.ts",
		"/C/Users/WilliamAllen/Desktop/APP/catalog_gen/Entity.ts",
		"/C/Users/WilliamAllen/Desktop/APP/catalog_gen/Container.ts",
		"/C/Users/WilliamAllen/Desktop/APP/catalog_gen/paginate.ts",
		"/C/Users/WilliamAllen/AppData/Local/Temp/7zOCEF9D116/main.js",
		"/C/Users/WilliamAllen/AppData/Local/Temp/7zO40D6EE20/Untitled.tex",
		"/C/Users/WilliamAllen/Downloads/main.go",
		"/C/Users/WilliamAllen/Downloads/testjson/19300102_1008.html.json",
		"/C/Users/WilliamAllen/Downloads/testjson/19300102_1009.html.json",
		"/C/Users/WilliamAllen/Downloads/testjson/19300102_1010.html.json",
		"/C/Users/WilliamAllen/Downloads/testjson/19300102_1011.html.json",
		"/C/Users/WilliamAllen/Downloads/testjson/19300102_1012.html.json",
		"/C/Users/WilliamAllen/Downloads/testjson/19300101_1054.html.json",
		"/C/Users/WilliamAllen/Downloads/testjson/19300101_1056.html.json",
		"/C/Users/WilliamAllen/Downloads/testjson/19300101_1055.html.json",
		"/C/Users/WilliamAllen/Downloads/testjson/19300101_1057.html.json",
		"/C/Users/WilliamAllen/Downloads/testjson/19300101_1058.html.json",
		"/C/Users/WilliamAllen/Downloads/testjson/19300101_1059.html.json",
		"/C/Users/WilliamAllen/Downloads/testjson/19300102_1000.html.json",
		"/C/Users/WilliamAllen/Downloads/testjson/19300101_1060.html.json",
		"/C/Users/WilliamAllen/Downloads/testjson/19300102_1001.html.json",
		"/C/Users/WilliamAllen/Downloads/testjson/19300102_1002.html.json",
		"/C/Users/WilliamAllen/Downloads/testjson/19300102_1004.html.json",
		"/C/Users/WilliamAllen/Downloads/testjson/19300102_1003.html.json",
		"/C/Users/WilliamAllen/Downloads/testjson/19300102_1005.html.json",
		"/C/Users/WilliamAllen/Downloads/testjson/19300102_1006.html.json",
		"/C/Users/WilliamAllen/Downloads/testjson/19300102_1007.html.json",
		"/C/Users/WILLIA~1/AppData/Local/Temp/7zEC6366CBF/19300102_1000.html.json",
		"/C/Users/WILLIA~1/AppData/Local/Temp/7zEC6366CBF/19300101_1056.html.json",
		"/C/Users/WILLIA~1/AppData/Local/Temp/7zEC6366CBF/19300102_1006.html.json",
		"/C/Users/WILLIA~1/AppData/Local/Temp/7zEC6366CBF/19300102_1018.html.json",
		"/C/Users/WILLIA~1/AppData/Local/Temp/7zEC6366CBF/19300102_1029.html.json",
		"/C/Users/WILLIA~1/AppData/Local/Temp/7zEC6366CBF/19300102_1004.html.json",
		"/C/Users/WILLIA~1/AppData/Local/Temp/7zEC6366CBF/19300102_1039.html.json",
		"/C/Users/WILLIA~1/AppData/Local/Temp/7zEC6366CBF/19300102_1041.html.json",
		"/C/Users/WILLIA~1/AppData/Local/Temp/7zEC6366CBF/19300102_1044.html.json",
		"/C/Users/WILLIA~1/AppData/Local/Temp/7zEC6366CBF/19300103_1001.html.json",
		"/C/Users/WILLIA~1/AppData/Local/Temp/7zEC6366CBF/19300103_1011.html.json",
		"/C/Users/WILLIA~1/AppData/Local/Temp/7zEC6366CBF/19300103_1017.html.json",
		"/C/Users/WILLIA~1/AppData/Local/Temp/7zEC6366CBF/19300103_1023.html.json",
		"/C/Users/WILLIA~1/AppData/Local/Temp/7zEC6366CBF/19300103_1028.html.json",
		"/C/Users/WilliamAllen/Desktop/APP/votefraud/DeadVoterDatabase/README.md",
		"/C/Users/WilliamAllen/Desktop/APP/Empire/src/empire/Empire.ts",
		"/C/Users/WilliamAllen/Desktop/APP/Empire/src/creep/worker/Harvester.ts",
		"/C/Users/WilliamAllen/Desktop/APP/Empire/src/main.ts",
		"/C/Users/WilliamAllen/Desktop/temp.py",
		"/C/Users/WilliamAllen/Downloads/HW6-Problem1(1).tex",
		"/C/Users/WilliamAllen/Desktop/APP/Empire/src/utils/RoomUtils.ts",
		"/C/Users/WilliamAllen/Desktop/APP/Empire/.gitignore",
		"/C/Users/WilliamAllen/Desktop/APP/Empire/dist/main.js",
		"/C/Users/WilliamAllen/Desktop/APP/Empire/src/types.d.ts",
		"/C/Users/WilliamAllen/Desktop/APP/Empire/src/room/room.ts",
		"/C/Users/WilliamAllen/Desktop/RomeAI/todo.txt",
		"/C/Users/WilliamAllen/Desktop/core/ios/redux-saga/sagas/SocketSagas.js",
		"/C/Users/WilliamAllen/Desktop/core/ios/Components/FeedPage/index.js",
		"/C/Users/WilliamAllen/Desktop/core/ios/node_modules/@codler/react-native-keyboard-aware-scroll-view/lib/KeyboardAwareInterface.js",
		"/C/Users/WilliamAllen/Desktop/core/ios/Components/ChatPage/ChatScreen.js",
		"/C/Users/WilliamAllen/Desktop/core/ios/node_modules/@codler/react-native-keyboard-aware-scroll-view/lib/KeyboardAwareHOC.js",
		"/C/Users/WilliamAllen/Desktop/core/ios/package.json",
		"/C/Users/WilliamAllen/Desktop/core/ios/yarn.lock",
		"/C/Users/WilliamAllen/Desktop/core/ios/node_modules/native-base/dist/src/basic/Content.js",
		"/C/Users/WilliamAllen/Desktop/core/ios/redux/constants/ActionTypes.js",
		"/C/Users/WilliamAllen/Desktop/core/ios/app.json"
	],
	"find":
	{
		"height": 25.0
	},
	"find_in_files":
	{
		"height": 208.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"road"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"file": "GameWrapper.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 50031,
						"regions":
						{
						},
						"selection":
						[
							[
								987,
								987
							]
						],
						"settings":
						{
							"git_gutter_is_enabled": true,
							"show_definitions": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 8,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1386.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "pycatan/player.py",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 22421,
						"regions":
						{
						},
						"selection":
						[
							[
								18063,
								18064
							]
						],
						"settings":
						{
							"git_gutter_is_enabled": true,
							"show_definitions": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 6778.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 2,
					"file": "random_agent.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4667,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"git_gutter_is_enabled": true,
							"show_definitions": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "todo.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 933,
						"regions":
						{
						},
						"selection":
						[
							[
								933,
								933
							]
						],
						"settings":
						{
							"git_gutter_is_enabled": true,
							"show_definitions": true,
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "catanrl.sublime-project",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 78,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"git_gutter_is_enabled": true,
							"show_definitions": true,
							"syntax": "Packages/zzz A File Icon zzz/aliases/JSON (Sublime).sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 25.0
	},
	"input":
	{
		"height": 78.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.5,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.doc":
	{
		"height": 0.0
	},
	"output.errorlist":
	{
		"height": 102.0
	},
	"output.exec":
	{
		"height": 224.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.mdpopups":
	{
		"height": 0.0
	},
	"pinned_build_system": "Packages/User/typescript_node.sublime-build",
	"project": "catanrl.sublime-project",
	"replace":
	{
		"height": 46.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 345.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 592.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 203.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
