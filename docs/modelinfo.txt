============INPUTS========================

------------Categorical:------------------ 
Game:
curent player playing [0, 3]

Trade:
trading player [0,2] (OHE)
Offered resource cards [0, 4] (OHE)
Expected resource cards [0, 4] (OHE)

Player:
turn to play [0,1] (OHE)
pending trade [0,1] (OHE)
available actions [0, 7] (OHE)

Player's cards (P_0):
	resource cards [0,4]
	-># of each [0, 9]
	dev cards [0,2]
	-># of each [0, 9]
	buildings [0,2]
	-># of each [0, 1]

Other player's (P_1, P_2, P_3) cards:
	resource cards [0,4]
	-># of each [0, 9]
	dev cards [0,20]
	-># of each [0, 9]
	buildings [0,2]
	-># of each [0, 1]

------------Numerical:------------------
int victoryPoints [0,10]
int currTurn [0,?]
int currStep [0,?]

------------Spacial:------------------
48 action points * 
(Re_0, Rs_0, Re_1, Rs_1, Re_2, Rs_2, port, robber, Building, player #, buildable)


Re_0 (OHE) [5]
Rs_0 (norm[0, 12]) [1]
Re_1 (OHE) [5]
Rs_1 (norm[0, 12]) [1]
Re_2 (OHE) [5]
Rs_2 (norm[0, 12]) [1]



============OUTPUTS========================

Model outputs:


------------Categorical:------------------ 
Action type (OHE) [Max 15]
NO_OP
ROLL
PURCHASE_RESOURCE
PURCHASE_AND_PLAY_BUILDING
PURCHASE_DEV_CARD
PLAY_DEV_CARD
PLAY_ROBBER
START_TRADE
ACCEPT_TRAD
DENY_TRADE
FORFEIT_CARDS
END_TURN
INITIAL_PLACE_ROAD
INITIAL_PLACE_BUILDING
PLACE_ROAD

// Maybe use pointer networks?
Resource Type 1 (OHE)
resource_type_wood
resource_type_wheat
resource_type_ore 
resource_type_sheep
resource_type_brick

Resource Type 2 (OHE)
resource_type_wood
resource_type_wheat
resource_type_ore 
resource_type_sheep
resource_type_brick

Building type (OHE)
building_type_road
building_type_settlement
building_type_city

Dev Card type (OHE)
dev_type_knight
dev_type_VP
dev_type_knight

Player (OHE)
Player 0
Player 1
Player 2
Player 3

------------Numerical:------------------
Win Probability

------------Spacial:------------------
48 action points [Choose x, y]


purchase(build, [xLoc, yLoc]);

p1 
p2



****************************************************************************

---------------------------------------------------------------------------------
Entity Encoder:
    Inputs: entity_list
    Outputs:
        embedded_entity - A 1D tensor of the embedded entities 
        entity_embeddings - The embedding of each entity (as opposed to `embedded_entity`, which has one embedding for all entities)
The fields of each entity in `entity_list` are first preprocessed and concatenated so that there is a single 1D tensor for each entity. Fields are preprocessed as follows:

unit_type: One-hot with maximum 256 (including unknown unit-type)
unit_attributes: One boolean for each of the 13 unit attributes
alliance: One-hot with maximum 5 (including unknown alliance)
current_health: One-hot of sqrt(min(current_health, 1500)) with maximum sqrt(1500), rounding down
current_shields: One-hot of sqrt(min(current_health, 1000)) with maximum sqrt(1000), rounding down
current_energy: One-hot of sqrt(min(current_health, 200)) with maximum sqrt(200), rounding down
cargo_space_used: One-hot with maximum 9
cargo_space_maximum: One-hot with maximum 9
build_progress: Float of build progress, in [0, 1]
current_health_ratio: Float of health ratio, in [0, 1]
current_shield_ratio: Float of shield ratio, in [0, 1]
current_energy_ratio: Float of energy ratio, in [0, 1]
display_type: One-hot with maximum 5
x_position: Binary encoding of entity x-coordinate, in game units
y_position: Binary encoding of entity y-coordinate, in game units
is_cloaked: One-hot with maximum 5
is_powered: One-hot with maximum 2
is_hallucination: One-hot with maximum 2
is_active: One-hot with maximum 2
is_on_screen: One-hot with maximum 2
is_in_cargo: One-hot with maximum 2
current_minerals: One-hot of (current_minerals / 100) with maximum 19, rounding down
current_vespene: One-hot of (current_vespene / 100) with maximum 26, rounding down
mined_minerals: One-hot of sqrt(min(mined_minerals, 1800)) with maximum sqrt(1800), rounding down
mined_vespene: One-hot of sqrt(min(mined_vespene, 2500)) with maximum sqrt(2500), rounding down
assigned_harvesters: One-hot with maximum 24
ideal_harvesters: One-hot with maximum 17
weapon_cooldown: One-hot with maximum 32 (counted in game steps)
order_queue_length: One-hot with maximum 9
order_1: One-hot across all order IDs
order_2: One-hot across all building training order IDs. Note that this tracks queued building orders, and unit orders will be ignored
order_3: One-hot across all building training order IDs
order_4: One-hot across all building training order IDs
buffs: Boolean for each buff of whether or not it is active. Only the first two buffs are tracked
addon_type: One-hot of every possible add-on type
order_progress_1: Float of order progress, in [0, 1], and one-hot of (`order_progress_1` / 10) with maximum 10
order_progress_2: Float of order progress, in [0, 1], and one-hot of (`order_progress_2` / 10) with maximum 10
weapon_upgrades: One-hot with maximum 4
armor_upgrades: One-hot with maximum 4
shield_upgrades: One-hot with maximum 4
was_selected: One-hot with maximum 2 of whether this unit was selected last action
was_targeted: One-hot with maximum 2 of whether this unit was targeted last action

There are up to 512 of these preprocessed entities, and any entities after 512 are ignored. We use a bias of -1e9 for any of the 512 entries that doesn't refer to an entity.

The preprocessed entities and biases are fed into a transformer with 3 layers of 2-headed self-attention. In each layer, each self-attention head uses keys, queries, and values of size 128, then passes the aggregated values through a Conv1D with kernel size 1 to double the number of channels (to 256). The head results are summed and passed through a 2-layer MLP with hidden size 1024 and output size 256.

The transformer output is passed through a ReLU, 1D convolution with 256 channels and kernel size 1, and another ReLU to yield `entity_embeddings`. The mean of the transformer output across across the units (masked by the missing entries) is fed through a linear layer of size 256 and a ReLU to yield `embedded_entity`.

---------------------------------------------------------------------------------