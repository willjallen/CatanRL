============INPUTS========================


------------Categorical:------------------ 
Game:
curent player playing [0, 3]

Trade:
trading player [0,2] (OHE)
Offered resource cards [0, 4] (OHE)
Expected resource cards [0, 4] (OHE)

Player:
turn to play [0,1] (OHE)
pending trade [0,1] (OHE)
available actions [0, 7] (OHE)

Player's cards (P_0):
	resource cards [0,4]
	-># of each [0, 9]
	dev cards [0,2]
	-># of each [0, 9]
	buildings [0,2]
	-># of each [0, 1]

Other player's (P_1, P_2, P_3) cards:
	resource cards [0,4]
	-># of each [0, 9]
	dev cards [0,20]
	-># of each [0, 9]
	buildings [0,2]
	-># of each [0, 1]

------------Numerical:------------------
int victoryPoints [0,10]
int currTurn [0,?]
int currStep [0,?]

------------Spacial:------------------
48 action points * 
(Re_0, Rs_0, Re_1, Rs_1, Re_2, Rs_2, port, robber, Building, player #, buildable)


Re_0 (OHE) [5]
Rs_0 (norm[0, 12]) [1]
Re_1 (OHE) [5]
Rs_1 (norm[0, 12]) [1]
Re_2 (OHE) [5]
Rs_2 (norm[0, 12]) [1]



============OUTPUTS========================

Model outputs:


------------Categorical:------------------ 
Action type (OHE) [Max 15]
NO_OP
ROLL
PURCHASE_RESOURCE
PURCHASE_AND_PLAY_BUILDING
PURCHASE_DEV_CARD
PLAY_DEV_CARD
PLAY_ROBBER
START_TRADE
ACCEPT_TRAD
DENY_TRADE
FORFEIT_CARDS
END_TURN
INITIAL_PLACE_ROAD
INITIAL_PLACE_BUILDING
PLACE_ROAD

// Maybe use pointer networks?
Resource Type 1 (OHE)
resource_type_wood
resource_type_wheat
resource_type_ore 
resource_type_sheep
resource_type_brick

Resource Type 2 (OHE)
resource_type_wood
resource_type_wheat
resource_type_ore 
resource_type_sheep
resource_type_brick

Building type (OHE)
building_type_road
building_type_settlement
building_type_city

Dev Card type (OHE)
dev_type_knight
dev_type_VP
dev_type_knight

Player (OHE)
Player 0
Player 1
Player 2
Player 3

------------Numerical:------------------
Win Probability

------------Spacial:------------------
48 action points [Choose x, y]


purchase(build, [xLoc, yLoc]);

p1 
p2



